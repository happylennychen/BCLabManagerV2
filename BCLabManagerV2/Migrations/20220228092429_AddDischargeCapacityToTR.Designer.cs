// <auto-generated />
using System;
using System.Collections.Generic;
using BCLabManager.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BCLabManager.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220228092429_AddDischargeCapacityToTR")]
    partial class AddDischargeCapacityToTR
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("BCLabManager.Model.AssetUsageRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AssetUseCount")
                        .HasColumnName("asset_use_count")
                        .HasColumnType("integer");

                    b.Property<int?>("BatteryId")
                        .HasColumnName("battery_id")
                        .HasColumnType("integer");

                    b.Property<int?>("ChamberId")
                        .HasColumnName("chamber_id")
                        .HasColumnType("integer");

                    b.Property<int?>("ChannelId")
                        .HasColumnName("channel_id")
                        .HasColumnType("integer");

                    b.Property<string>("ProgramName")
                        .HasColumnName("program_name")
                        .HasColumnType("text");

                    b.Property<string>("RecipeName")
                        .HasColumnName("recipe_name")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnName("timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("pk_asset_usage_records");

                    b.HasIndex("BatteryId")
                        .HasName("ix_asset_usage_records_battery_id");

                    b.HasIndex("ChamberId")
                        .HasName("ix_asset_usage_records_chamber_id");

                    b.HasIndex("ChannelId")
                        .HasName("ix_asset_usage_records_channel_id");

                    b.ToTable("asset_usage_records");
                });

            modelBuilder.Entity("BCLabManager.Model.Battery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AssetUseCount")
                        .HasColumnName("asset_use_count")
                        .HasColumnType("integer");

                    b.Property<int?>("BatteryTypeId")
                        .HasColumnName("battery_type_id")
                        .HasColumnType("integer");

                    b.Property<double>("CycleCount")
                        .HasColumnName("cycle_count")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_batteries");

                    b.HasIndex("BatteryTypeId")
                        .HasName("ix_batteries_battery_type_id");

                    b.ToTable("batteries");
                });

            modelBuilder.Entity("BCLabManager.Model.BatteryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ChargeCurrent")
                        .HasColumnName("charge_current")
                        .HasColumnType("integer");

                    b.Property<int>("ChargeHighTemp")
                        .HasColumnName("charge_high_temp")
                        .HasColumnType("integer");

                    b.Property<int>("ChargeLowTemp")
                        .HasColumnName("charge_low_temp")
                        .HasColumnType("integer");

                    b.Property<int>("CutoffDischargeVoltage")
                        .HasColumnName("cutoff_discharge_voltage")
                        .HasColumnType("integer");

                    b.Property<int>("DischargeHighTemp")
                        .HasColumnName("discharge_high_temp")
                        .HasColumnType("integer");

                    b.Property<int>("DischargeLowTemp")
                        .HasColumnName("discharge_low_temp")
                        .HasColumnType("integer");

                    b.Property<int>("FullyChargedEndCurrent")
                        .HasColumnName("fully_charged_end_current")
                        .HasColumnType("integer");

                    b.Property<int>("FullyChargedEndingTimeout")
                        .HasColumnName("fully_charged_ending_timeout")
                        .HasColumnType("integer");

                    b.Property<int>("LimitedChargeVoltage")
                        .HasColumnName("limited_charge_voltage")
                        .HasColumnType("integer");

                    b.Property<string>("Manufacturer")
                        .HasColumnName("manufacturer")
                        .HasColumnType("text");

                    b.Property<string>("Material")
                        .HasColumnName("material")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("NominalVoltage")
                        .HasColumnName("nominal_voltage")
                        .HasColumnType("integer");

                    b.Property<int>("RatedCapacity")
                        .HasColumnName("rated_capacity")
                        .HasColumnType("integer");

                    b.Property<int>("TypicalCapacity")
                        .HasColumnName("typical_capacity")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_battery_types");

                    b.ToTable("battery_types");
                });

            modelBuilder.Entity("BCLabManager.Model.Chamber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AssetUseCount")
                        .HasColumnName("asset_use_count")
                        .HasColumnType("integer");

                    b.Property<double>("HighestTemperature")
                        .HasColumnName("highest_temperature")
                        .HasColumnType("double precision");

                    b.Property<double>("LowestTemperature")
                        .HasColumnName("lowest_temperature")
                        .HasColumnType("double precision");

                    b.Property<string>("Manufacturer")
                        .HasColumnName("manufacturer")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_chambers");

                    b.ToTable("chambers");
                });

            modelBuilder.Entity("BCLabManager.Model.Channel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AssetUseCount")
                        .HasColumnName("asset_use_count")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int?>("TesterId")
                        .HasColumnName("tester_id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_channels");

                    b.HasIndex("TesterId")
                        .HasName("ix_channels_tester_id");

                    b.ToTable("channels");
                });

            modelBuilder.Entity("BCLabManager.Model.Coefficient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("Offset")
                        .HasColumnName("offset")
                        .HasColumnType("double precision");

                    b.Property<double>("Slope")
                        .HasColumnName("slope")
                        .HasColumnType("double precision");

                    b.Property<double>("Temperature")
                        .HasColumnName("temperature")
                        .HasColumnType("double precision");

                    b.HasKey("Id")
                        .HasName("pk_coefficients");

                    b.ToTable("coefficients");
                });

            modelBuilder.Entity("BCLabManager.Model.Condition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Mark")
                        .HasColumnName("mark")
                        .HasColumnType("integer");

                    b.Property<int>("Parameter")
                        .HasColumnName("parameter")
                        .HasColumnType("integer");

                    b.Property<int>("Value")
                        .HasColumnName("value")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_condition");

                    b.ToTable("condition");
                });

            modelBuilder.Entity("BCLabManager.Model.CutOffBehavior", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ConditionId")
                        .HasColumnName("condition_id")
                        .HasColumnType("integer");

                    b.Property<int>("Loop1Count")
                        .HasColumnName("loop1count")
                        .HasColumnType("integer");

                    b.Property<string>("Loop1Target")
                        .HasColumnName("loop1target")
                        .HasColumnType("text");

                    b.Property<int>("Loop2Count")
                        .HasColumnName("loop2count")
                        .HasColumnType("integer");

                    b.Property<string>("Loop2Target")
                        .HasColumnName("loop2target")
                        .HasColumnType("text");

                    b.Property<int?>("StepV2Id")
                        .HasColumnName("step_v2id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_cut_off_behavior");

                    b.HasIndex("ConditionId")
                        .HasName("ix_cut_off_behavior_condition_id");

                    b.HasIndex("StepV2Id")
                        .HasName("ix_cut_off_behavior_step_v2id");

                    b.ToTable("cut_off_behavior");
                });

            modelBuilder.Entity("BCLabManager.Model.CutOffCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Index")
                        .HasColumnName("index")
                        .HasColumnType("integer");

                    b.Property<int>("JumpType")
                        .HasColumnName("jump_type")
                        .HasColumnType("integer");

                    b.Property<int>("Loop1Count")
                        .HasColumnName("loop1count")
                        .HasColumnType("integer");

                    b.Property<string>("Loop1Target")
                        .HasColumnName("loop1target")
                        .HasColumnType("text");

                    b.Property<int>("Loop2Count")
                        .HasColumnName("loop2count")
                        .HasColumnType("integer");

                    b.Property<string>("Loop2Target")
                        .HasColumnName("loop2target")
                        .HasColumnType("text");

                    b.Property<int>("Mark")
                        .HasColumnName("mark")
                        .HasColumnType("integer");

                    b.Property<int>("Parameter")
                        .HasColumnName("parameter")
                        .HasColumnType("integer");

                    b.Property<int?>("StepV2Id")
                        .HasColumnName("step_v2id")
                        .HasColumnType("integer");

                    b.Property<int>("Value")
                        .HasColumnName("value")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_cut_off_condition");

                    b.HasIndex("StepV2Id")
                        .HasName("ix_cut_off_condition_step_v2id");

                    b.ToTable("cut_off_condition");
                });

            modelBuilder.Entity("BCLabManager.Model.EmulatorResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("integer");

                    b.Property<string>("em_current")
                        .HasColumnName("em_current")
                        .HasColumnType("text");

                    b.Property<string>("em_temperature")
                        .HasColumnName("em_temperature")
                        .HasColumnType("text");

                    b.Property<string>("emulator_info")
                        .HasColumnName("emulator_info")
                        .HasColumnType("text");

                    b.Property<string>("error_rsoc")
                        .HasColumnName("error_rsoc")
                        .HasColumnType("text");

                    b.Property<string>("error_tte")
                        .HasColumnName("error_tte")
                        .HasColumnType("text");

                    b.Property<string>("excel_file_path")
                        .HasColumnName("excel_file_path")
                        .HasColumnType("text");

                    b.Property<bool>("is_valid")
                        .HasColumnName("is_valid")
                        .HasColumnType("boolean");

                    b.Property<int?>("lib_fgId")
                        .HasColumnName("lib_fg_id")
                        .HasColumnType("integer");

                    b.Property<string>("log_file_path")
                        .HasColumnName("log_file_path")
                        .HasColumnType("text");

                    b.Property<int?>("project_settingId")
                        .HasColumnName("project_setting_id")
                        .HasColumnType("integer");

                    b.Property<string>("rsoc_png_file_path")
                        .HasColumnName("rsoc_png_file_path")
                        .HasColumnType("text");

                    b.Property<int?>("table_maker_cfileId")
                        .HasColumnName("table_maker_cfile_id")
                        .HasColumnType("integer");

                    b.Property<int?>("table_maker_hfileId")
                        .HasColumnName("table_maker_hfile_id")
                        .HasColumnType("integer");

                    b.Property<int?>("test_recordId")
                        .HasColumnName("test_record_id")
                        .HasColumnType("integer");

                    b.Property<string>("tte_png_file_path")
                        .HasColumnName("tte_png_file_path")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_emulator_results");

                    b.HasIndex("ProjectId")
                        .HasName("ix_emulator_results_project_id");

                    b.HasIndex("lib_fgId")
                        .HasName("ix_emulator_results_lib_fg_id");

                    b.HasIndex("project_settingId")
                        .HasName("ix_emulator_results_project_setting_id");

                    b.HasIndex("table_maker_cfileId")
                        .HasName("ix_emulator_results_table_maker_cfile_id");

                    b.HasIndex("table_maker_hfileId")
                        .HasName("ix_emulator_results_table_maker_hfile_id");

                    b.HasIndex("test_recordId")
                        .HasName("ix_emulator_results_test_record_id");

                    b.ToTable("emulator_results");
                });

            modelBuilder.Entity("BCLabManager.Model.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("Module")
                        .HasColumnName("module")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnName("timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Type")
                        .HasColumnName("type")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_events");

                    b.ToTable("events");
                });

            modelBuilder.Entity("BCLabManager.Model.JumpBehavior", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ConditionId")
                        .HasColumnName("condition_id")
                        .HasColumnType("integer");

                    b.Property<int?>("CutOffBehaviorId")
                        .HasColumnName("cut_off_behavior_id")
                        .HasColumnType("integer");

                    b.Property<int>("Index")
                        .HasColumnName("index")
                        .HasColumnType("integer");

                    b.Property<int>("JumpType")
                        .HasColumnName("jump_type")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_jump_behavior");

                    b.HasIndex("ConditionId")
                        .HasName("ix_jump_behavior_condition_id");

                    b.HasIndex("CutOffBehaviorId")
                        .HasName("ix_jump_behavior_cut_off_behavior_id");

                    b.ToTable("jump_behavior");
                });

            modelBuilder.Entity("BCLabManager.Model.LibFG", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("is_valid")
                        .HasColumnName("is_valid")
                        .HasColumnType("boolean");

                    b.Property<string>("libfg_dev_pack_file_path")
                        .HasColumnName("libfg_dev_pack_file_path")
                        .HasColumnType("text");

                    b.Property<string>("libfg_dll_path")
                        .HasColumnName("libfg_dll_path")
                        .HasColumnType("text");

                    b.Property<int>("libfg_model_code")
                        .HasColumnName("libfg_model_code")
                        .HasColumnType("integer");

                    b.Property<string>("libfg_sample_file_path")
                        .HasColumnName("libfg_sample_file_path")
                        .HasColumnType("text");

                    b.Property<int>("libfg_version")
                        .HasColumnName("libfg_version")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_lib_fgs");

                    b.ToTable("lib_fgs");
                });

            modelBuilder.Entity("BCLabManager.Model.Program", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("ED")
                        .HasColumnName("ed")
                        .HasColumnType("interval");

                    b.Property<DateTime>("EET")
                        .HasColumnName("eet")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EST")
                        .HasColumnName("est")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndTime")
                        .HasColumnName("end_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsInvalid")
                        .HasColumnName("is_invalid")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<decimal>("Order")
                        .HasColumnName("order")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int?>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("integer");

                    b.Property<List<string>>("RecipeTemplates")
                        .HasColumnName("recipe_templates")
                        .HasColumnType("text[]");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnName("request_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Requester")
                        .HasColumnName("requester")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnName("start_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TableFilePath")
                        .HasColumnName("table_file_path")
                        .HasColumnType("text");

                    b.Property<List<int>>("Temperatures")
                        .HasColumnName("temperatures")
                        .HasColumnType("integer[]");

                    b.Property<int?>("TypeId")
                        .HasColumnName("type_id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_programs");

                    b.HasIndex("ProjectId")
                        .HasName("ix_programs_project_id");

                    b.HasIndex("TypeId")
                        .HasName("ix_programs_type_id");

                    b.ToTable("programs");
                });

            modelBuilder.Entity("BCLabManager.Model.ProgramType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_program_types");

                    b.ToTable("program_types");
                });

            modelBuilder.Entity("BCLabManager.Model.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AbsoluteMaxCapacity")
                        .HasColumnName("absolute_max_capacity")
                        .HasColumnType("integer");

                    b.Property<int?>("BatteryTypeId")
                        .HasColumnName("battery_type_id")
                        .HasColumnType("integer");

                    b.Property<string>("Customer")
                        .HasColumnName("customer")
                        .HasColumnType("text");

                    b.Property<int>("CutoffDischargeVoltage")
                        .HasColumnName("cutoff_discharge_voltage")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<int>("LimitedChargeVoltage")
                        .HasColumnName("limited_charge_voltage")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<long>("PlanedDays")
                        .HasColumnName("planed_days")
                        .HasColumnType("bigint");

                    b.Property<List<DateTime>>("StartTimes")
                        .HasColumnName("start_times")
                        .HasColumnType("timestamp without time zone[]");

                    b.Property<List<DateTime>>("StopTimes")
                        .HasColumnName("stop_times")
                        .HasColumnType("timestamp without time zone[]");

                    b.Property<List<int>>("VoltagePoints")
                        .HasColumnName("voltage_points")
                        .HasColumnType("integer[]");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.HasIndex("BatteryTypeId")
                        .HasName("ix_projects_battery_type_id");

                    b.ToTable("projects");
                });

            modelBuilder.Entity("BCLabManager.Model.ProjectSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("integer");

                    b.Property<int>("accumulated_capacity_mahr")
                        .HasColumnName("accumulated_capacity_mahr")
                        .HasColumnType("integer");

                    b.Property<int>("design_capacity_mahr")
                        .HasColumnName("design_capacity_mahr")
                        .HasColumnType("integer");

                    b.Property<int>("discharge_end_voltage_mv")
                        .HasColumnName("discharge_end_voltage_mv")
                        .HasColumnType("integer");

                    b.Property<int>("dsg_low_temp_01dc")
                        .HasColumnName("dsg_low_temp_01dc")
                        .HasColumnType("integer");

                    b.Property<int>("dsg_low_volt_mv")
                        .HasColumnName("dsg_low_volt_mv")
                        .HasColumnType("integer");

                    b.Property<string>("extend_cfg")
                        .HasColumnName("extend_cfg")
                        .HasColumnType("text");

                    b.Property<int>("fully_charged_end_current_ma")
                        .HasColumnName("fully_charged_end_current_ma")
                        .HasColumnType("integer");

                    b.Property<int>("fully_charged_ending_time_ms")
                        .HasColumnName("fully_charged_ending_time_ms")
                        .HasColumnType("integer");

                    b.Property<int>("initial_ratio_fcc")
                        .HasColumnName("initial_ratio_fcc")
                        .HasColumnType("integer");

                    b.Property<int>("initial_soc_start_ocv")
                        .HasColumnName("initial_soc_start_ocv")
                        .HasColumnType("integer");

                    b.Property<bool>("is_valid")
                        .HasColumnName("is_valid")
                        .HasColumnType("boolean");

                    b.Property<int>("limited_charge_voltage_mv")
                        .HasColumnName("limited_charge_voltage_mv")
                        .HasColumnType("integer");

                    b.Property<int>("system_line_impedance")
                        .HasColumnName("system_line_impedance")
                        .HasColumnType("integer");

                    b.Property<int>("threshold_1st_facc_mv")
                        .HasColumnName("threshold_1st_facc_mv")
                        .HasColumnType("integer");

                    b.Property<int>("threshold_2nd_facc_mv")
                        .HasColumnName("threshold_2nd_facc_mv")
                        .HasColumnType("integer");

                    b.Property<int>("threshold_3rd_facc_mv")
                        .HasColumnName("threshold_3rd_facc_mv")
                        .HasColumnType("integer");

                    b.Property<int>("threshold_4th_facc_mv")
                        .HasColumnName("threshold_4th_facc_mv")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_project_settings");

                    b.HasIndex("ProjectId")
                        .HasName("ix_project_settings_project_id");

                    b.ToTable("project_settings");
                });

            modelBuilder.Entity("BCLabManager.Model.Protection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Mark")
                        .HasColumnName("mark")
                        .HasColumnType("integer");

                    b.Property<int>("Parameter")
                        .HasColumnName("parameter")
                        .HasColumnType("integer");

                    b.Property<int?>("RecipeTemplateId")
                        .HasColumnName("recipe_template_id")
                        .HasColumnType("integer");

                    b.Property<int?>("StepV2Id")
                        .HasColumnName("step_v2id")
                        .HasColumnType("integer");

                    b.Property<int>("Value")
                        .HasColumnName("value")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_protections");

                    b.HasIndex("RecipeTemplateId")
                        .HasName("ix_protections_recipe_template_id");

                    b.HasIndex("StepV2Id")
                        .HasName("ix_protections_step_v2id");

                    b.ToTable("protections");
                });

            modelBuilder.Entity("BCLabManager.Model.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<TimeSpan>("ED")
                        .HasColumnName("ed")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("ED1")
                        .HasColumnName("ed1")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("ED2")
                        .HasColumnName("ed2")
                        .HasColumnType("interval");

                    b.Property<DateTime>("EET")
                        .HasColumnName("eet")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EST")
                        .HasColumnName("est")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndTime")
                        .HasColumnName("end_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsAbandoned")
                        .HasColumnName("is_abandoned")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int?>("ProgramId")
                        .HasColumnName("program_id")
                        .HasColumnType("integer");

                    b.Property<int>("RecipeTemplateId")
                        .HasColumnName("recipe_template_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnName("start_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("Temperature")
                        .HasColumnName("temperature")
                        .HasColumnType("double precision");

                    b.HasKey("Id")
                        .HasName("pk_recipes");

                    b.HasIndex("ProgramId")
                        .HasName("ix_recipes_program_id");

                    b.HasIndex("RecipeTemplateId")
                        .HasName("ix_recipes_recipe_template_id");

                    b.ToTable("recipes");
                });

            modelBuilder.Entity("BCLabManager.Model.RecipeTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Editable")
                        .HasColumnName("editable")
                        .HasColumnType("boolean");

                    b.Property<int?>("GroupId")
                        .HasColumnName("group_id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_recipe_templates");

                    b.HasIndex("GroupId")
                        .HasName("ix_recipe_templates_group_id");

                    b.ToTable("recipe_templates");
                });

            modelBuilder.Entity("BCLabManager.Model.RecipeTemplateGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_recipe_template_groups");

                    b.ToTable("recipe_template_groups");
                });

            modelBuilder.Entity("BCLabManager.Model.ReleasePackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("integer");

                    b.Property<string>("comment")
                        .HasColumnName("comment")
                        .HasColumnType("text");

                    b.Property<string>("emulator_info")
                        .HasColumnName("emulator_info")
                        .HasColumnType("text");

                    b.Property<string>("error_rsoc")
                        .HasColumnName("error_rsoc")
                        .HasColumnType("text");

                    b.Property<string>("error_tte")
                        .HasColumnName("error_tte")
                        .HasColumnType("text");

                    b.Property<bool>("is_valid")
                        .HasColumnName("is_valid")
                        .HasColumnType("boolean");

                    b.Property<int?>("lib_fgId")
                        .HasColumnName("lib_fg_id")
                        .HasColumnType("integer");

                    b.Property<string>("package_file_path")
                        .HasColumnName("package_file_path")
                        .HasColumnType("text");

                    b.Property<int?>("project_settingId")
                        .HasColumnName("project_setting_id")
                        .HasColumnType("integer");

                    b.Property<string>("result_file_path")
                        .HasColumnName("result_file_path")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_release_packages");

                    b.HasIndex("ProjectId")
                        .HasName("ix_release_packages_project_id");

                    b.HasIndex("lib_fgId")
                        .HasName("ix_release_packages_lib_fg_id");

                    b.HasIndex("project_settingId")
                        .HasName("ix_release_packages_project_setting_id");

                    b.ToTable("release_packages");
                });

            modelBuilder.Entity("BCLabManager.Model.Step", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("CRate")
                        .HasColumnName("c_rate")
                        .HasColumnType("double precision");

                    b.Property<int>("CompareMark")
                        .HasColumnName("compare_mark")
                        .HasColumnType("integer");

                    b.Property<int>("LoopCount")
                        .HasColumnName("loop_count")
                        .HasColumnType("integer");

                    b.Property<string>("LoopLabel")
                        .HasColumnName("loop_label")
                        .HasColumnType("text");

                    b.Property<string>("LoopTarget")
                        .HasColumnName("loop_target")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<int?>("RecipeTemplateId")
                        .HasColumnName("recipe_template_id")
                        .HasColumnType("integer");

                    b.Property<int?>("StepTemplateId")
                        .HasColumnName("step_template_id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_steps");

                    b.HasIndex("RecipeTemplateId")
                        .HasName("ix_steps_recipe_template_id");

                    b.HasIndex("StepTemplateId")
                        .HasName("ix_steps_step_template_id");

                    b.ToTable("steps");
                });

            modelBuilder.Entity("BCLabManager.Model.StepRuntime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("DesignCapacityInmAH")
                        .HasColumnName("design_capacity_inm_ah")
                        .HasColumnType("double precision");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnName("duration")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("ED")
                        .HasColumnName("ed")
                        .HasColumnType("interval");

                    b.Property<DateTime>("EET")
                        .HasColumnName("eet")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EST")
                        .HasColumnName("est")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndTime")
                        .HasColumnName("end_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<int?>("RecipeId")
                        .HasColumnName("recipe_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnName("start_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("StepTemplateId")
                        .HasColumnName("step_template_id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_step_runtimes");

                    b.HasIndex("RecipeId")
                        .HasName("ix_step_runtimes_recipe_id");

                    b.HasIndex("StepTemplateId")
                        .HasName("ix_step_runtimes_step_template_id");

                    b.ToTable("step_runtimes");
                });

            modelBuilder.Entity("BCLabManager.Model.StepTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CoefficientId")
                        .HasColumnName("coefficient_id")
                        .HasColumnType("integer");

                    b.Property<double>("CurrentInput")
                        .HasColumnName("current_input")
                        .HasColumnType("double precision");

                    b.Property<int>("CurrentUnit")
                        .HasColumnName("current_unit")
                        .HasColumnType("integer");

                    b.Property<int>("CutOffConditionType")
                        .HasColumnName("cut_off_condition_type")
                        .HasColumnType("integer");

                    b.Property<double>("CutOffConditionValue")
                        .HasColumnName("cut_off_condition_value")
                        .HasColumnType("double precision");

                    b.HasKey("Id")
                        .HasName("pk_step_templates");

                    b.HasIndex("CoefficientId")
                        .HasName("ix_step_templates_coefficient_id");

                    b.ToTable("step_templates");
                });

            modelBuilder.Entity("BCLabManager.Model.StepV2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ActionId")
                        .HasColumnName("action_id")
                        .HasColumnType("integer");

                    b.Property<int>("Index")
                        .HasColumnName("index")
                        .HasColumnType("integer");

                    b.Property<string>("Loop1Label")
                        .HasColumnName("loop1label")
                        .HasColumnType("text");

                    b.Property<string>("Loop2Label")
                        .HasColumnName("loop2label")
                        .HasColumnType("text");

                    b.Property<int>("Prerest")
                        .HasColumnName("prerest")
                        .HasColumnType("integer");

                    b.Property<int?>("RecipeTemplateId")
                        .HasColumnName("recipe_template_id")
                        .HasColumnType("integer");

                    b.Property<int>("Rest")
                        .HasColumnName("rest")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_step_v2");

                    b.HasIndex("ActionId")
                        .HasName("ix_step_v2_action_id");

                    b.HasIndex("RecipeTemplateId")
                        .HasName("ix_step_v2_recipe_template_id");

                    b.ToTable("step_v2");
                });

            modelBuilder.Entity("BCLabManager.Model.TableMakerProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FilePath")
                        .HasColumnName("file_path")
                        .HasColumnType("text");

                    b.Property<bool>("IsValid")
                        .HasColumnName("is_valid")
                        .HasColumnType("boolean");

                    b.Property<string>("MD5")
                        .HasColumnName("md5")
                        .HasColumnType("text");

                    b.Property<int?>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("integer");

                    b.Property<int?>("TableMakerRecordId")
                        .HasColumnName("table_maker_record_id")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeId")
                        .HasColumnName("type_id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_table_maker_products");

                    b.HasIndex("ProjectId")
                        .HasName("ix_table_maker_products_project_id");

                    b.HasIndex("TableMakerRecordId")
                        .HasName("ix_table_maker_products_table_maker_record_id");

                    b.HasIndex("TypeId")
                        .HasName("ix_table_maker_products_type_id");

                    b.ToTable("table_maker_products");
                });

            modelBuilder.Entity("BCLabManager.Model.TableMakerProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_table_maker_product_types");

                    b.ToTable("table_maker_product_types");
                });

            modelBuilder.Entity("BCLabManager.Model.TableMakerRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<long>("EOD")
                        .HasColumnName("eod")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsValid")
                        .HasColumnName("is_valid")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("OCVSources")
                        .HasColumnName("ocv_sources")
                        .HasColumnType("text[]");

                    b.Property<int?>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("integer");

                    b.Property<List<string>>("RCSources")
                        .HasColumnName("rc_sources")
                        .HasColumnType("text[]");

                    b.Property<string>("TableMakerVersion")
                        .HasColumnName("table_maker_version")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnName("timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<List<int>>("VoltagePoints")
                        .HasColumnName("voltage_points")
                        .HasColumnType("integer[]");

                    b.HasKey("Id")
                        .HasName("pk_table_maker_records");

                    b.HasIndex("ProjectId")
                        .HasName("ix_table_maker_records_project_id");

                    b.ToTable("table_maker_records");
                });

            modelBuilder.Entity("BCLabManager.Model.TestRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AssignedBatteryId")
                        .HasColumnName("assigned_battery_id")
                        .HasColumnType("integer");

                    b.Property<int?>("AssignedChamberId")
                        .HasColumnName("assigned_chamber_id")
                        .HasColumnType("integer");

                    b.Property<int?>("AssignedChannelId")
                        .HasColumnName("assigned_channel_id")
                        .HasColumnType("integer");

                    b.Property<string>("BatteryStr")
                        .HasColumnName("battery_str")
                        .HasColumnType("text");

                    b.Property<string>("BatteryTypeStr")
                        .HasColumnName("battery_type_str")
                        .HasColumnType("text");

                    b.Property<double>("CapacityDifference")
                        .HasColumnName("capacity_difference")
                        .HasColumnType("double precision");

                    b.Property<string>("ChamberStr")
                        .HasColumnName("chamber_str")
                        .HasColumnType("text");

                    b.Property<string>("ChannelStr")
                        .HasColumnName("channel_str")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("text");

                    b.Property<double>("Current")
                        .HasColumnName("current")
                        .HasColumnType("double precision");

                    b.Property<double>("DischargeCapacity")
                        .HasColumnName("discharge_capacity")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("EndTime")
                        .HasColumnName("end_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("LastCycle")
                        .HasColumnName("last_cycle")
                        .HasColumnType("double precision");

                    b.Property<string>("MD5")
                        .HasColumnName("md5")
                        .HasColumnType("text");

                    b.Property<double>("MeasurementGain")
                        .HasColumnName("measurement_gain")
                        .HasColumnType("double precision");

                    b.Property<double>("MeasurementOffset")
                        .HasColumnName("measurement_offset")
                        .HasColumnType("double precision");

                    b.Property<double>("NewCycle")
                        .HasColumnName("new_cycle")
                        .HasColumnType("double precision");

                    b.Property<string>("Operator")
                        .HasColumnName("operator")
                        .HasColumnType("text");

                    b.Property<string>("ProgramStr")
                        .HasColumnName("program_str")
                        .HasColumnType("text");

                    b.Property<string>("ProjectStr")
                        .HasColumnName("project_str")
                        .HasColumnType("text");

                    b.Property<int?>("RecipeId")
                        .HasColumnName("recipe_id")
                        .HasColumnType("integer");

                    b.Property<string>("RecipeStr")
                        .HasColumnName("recipe_str")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnName("start_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<string>("StdFilePath")
                        .HasColumnName("std_file_path")
                        .HasColumnType("text");

                    b.Property<string>("StdMD5")
                        .HasColumnName("std_md5")
                        .HasColumnType("text");

                    b.Property<double>("Temperature")
                        .HasColumnName("temperature")
                        .HasColumnType("double precision");

                    b.Property<string>("TestFilePath")
                        .HasColumnName("test_file_path")
                        .HasColumnType("text");

                    b.Property<string>("TesterStr")
                        .HasColumnName("tester_str")
                        .HasColumnType("text");

                    b.Property<double>("TraceResistance")
                        .HasColumnName("trace_resistance")
                        .HasColumnType("double precision");

                    b.HasKey("Id")
                        .HasName("pk_test_records");

                    b.HasIndex("AssignedBatteryId")
                        .HasName("ix_test_records_assigned_battery_id");

                    b.HasIndex("AssignedChamberId")
                        .HasName("ix_test_records_assigned_chamber_id");

                    b.HasIndex("AssignedChannelId")
                        .HasName("ix_test_records_assigned_channel_id");

                    b.HasIndex("RecipeId")
                        .HasName("ix_test_records_recipe_id");

                    b.ToTable("test_records");
                });

            modelBuilder.Entity("BCLabManager.Model.Tester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Manufacturer")
                        .HasColumnName("manufacturer")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_testers");

                    b.ToTable("testers");
                });

            modelBuilder.Entity("BCLabManager.Model.TesterAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Current")
                        .HasColumnName("current")
                        .HasColumnType("integer");

                    b.Property<int>("Mode")
                        .HasColumnName("mode")
                        .HasColumnType("integer");

                    b.Property<int>("Power")
                        .HasColumnName("power")
                        .HasColumnType("integer");

                    b.Property<int>("Voltage")
                        .HasColumnName("voltage")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_tester_action");

                    b.ToTable("tester_action");
                });

            modelBuilder.Entity("BCLabManager.Model.AssetUsageRecord", b =>
                {
                    b.HasOne("BCLabManager.Model.Battery", null)
                        .WithMany("Records")
                        .HasForeignKey("BatteryId")
                        .HasConstraintName("fk_asset_usage_records_batteries_battery_id");

                    b.HasOne("BCLabManager.Model.Chamber", null)
                        .WithMany("Records")
                        .HasForeignKey("ChamberId")
                        .HasConstraintName("fk_asset_usage_records_chambers_chamber_id");

                    b.HasOne("BCLabManager.Model.Channel", null)
                        .WithMany("Records")
                        .HasForeignKey("ChannelId")
                        .HasConstraintName("fk_asset_usage_records_channels_channel_id");
                });

            modelBuilder.Entity("BCLabManager.Model.Battery", b =>
                {
                    b.HasOne("BCLabManager.Model.BatteryType", "BatteryType")
                        .WithMany()
                        .HasForeignKey("BatteryTypeId")
                        .HasConstraintName("fk_batteries_battery_types_battery_type_id");
                });

            modelBuilder.Entity("BCLabManager.Model.Channel", b =>
                {
                    b.HasOne("BCLabManager.Model.Tester", "Tester")
                        .WithMany()
                        .HasForeignKey("TesterId")
                        .HasConstraintName("fk_channels_testers_tester_id");
                });

            modelBuilder.Entity("BCLabManager.Model.CutOffBehavior", b =>
                {
                    b.HasOne("BCLabManager.Model.Condition", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionId")
                        .HasConstraintName("fk_cut_off_behavior_condition_condition_id");

                    b.HasOne("BCLabManager.Model.StepV2", null)
                        .WithMany("CutOffBehaviors")
                        .HasForeignKey("StepV2Id")
                        .HasConstraintName("fk_cut_off_behavior_step_v2_step_v2id");
                });

            modelBuilder.Entity("BCLabManager.Model.CutOffCondition", b =>
                {
                    b.HasOne("BCLabManager.Model.StepV2", null)
                        .WithMany("CutOffConditions")
                        .HasForeignKey("StepV2Id")
                        .HasConstraintName("fk_cut_off_condition_step_v2_step_v2id");
                });

            modelBuilder.Entity("BCLabManager.Model.EmulatorResult", b =>
                {
                    b.HasOne("BCLabManager.Model.Project", null)
                        .WithMany("EmulatorResults")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_emulator_results_projects_project_id");

                    b.HasOne("BCLabManager.Model.LibFG", "lib_fg")
                        .WithMany()
                        .HasForeignKey("lib_fgId")
                        .HasConstraintName("fk_emulator_results_lib_fgs_lib_fg_id");

                    b.HasOne("BCLabManager.Model.ProjectSetting", "project_setting")
                        .WithMany()
                        .HasForeignKey("project_settingId")
                        .HasConstraintName("fk_emulator_results_project_settings_project_setting_id");

                    b.HasOne("BCLabManager.Model.TableMakerProduct", "table_maker_cfile")
                        .WithMany()
                        .HasForeignKey("table_maker_cfileId")
                        .HasConstraintName("fk_emulator_results_table_maker_products_table_maker_cfile_id");

                    b.HasOne("BCLabManager.Model.TableMakerProduct", "table_maker_hfile")
                        .WithMany()
                        .HasForeignKey("table_maker_hfileId")
                        .HasConstraintName("fk_emulator_results_table_maker_products_table_maker_hfile_id");

                    b.HasOne("BCLabManager.Model.TestRecord", "test_record")
                        .WithMany("EmulatorResults")
                        .HasForeignKey("test_recordId")
                        .HasConstraintName("fk_emulator_results_test_records_test_record_id");
                });

            modelBuilder.Entity("BCLabManager.Model.JumpBehavior", b =>
                {
                    b.HasOne("BCLabManager.Model.Condition", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionId")
                        .HasConstraintName("fk_jump_behavior_condition_condition_id");

                    b.HasOne("BCLabManager.Model.CutOffBehavior", null)
                        .WithMany("JumpBehaviors")
                        .HasForeignKey("CutOffBehaviorId")
                        .HasConstraintName("fk_jump_behavior_cut_off_behavior_cut_off_behavior_id");
                });

            modelBuilder.Entity("BCLabManager.Model.Program", b =>
                {
                    b.HasOne("BCLabManager.Model.Project", "Project")
                        .WithMany("Programs")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_programs_projects_project_id");

                    b.HasOne("BCLabManager.Model.ProgramType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .HasConstraintName("fk_programs_program_types_type_id");
                });

            modelBuilder.Entity("BCLabManager.Model.Project", b =>
                {
                    b.HasOne("BCLabManager.Model.BatteryType", "BatteryType")
                        .WithMany("Projects")
                        .HasForeignKey("BatteryTypeId")
                        .HasConstraintName("fk_projects_battery_types_battery_type_id");
                });

            modelBuilder.Entity("BCLabManager.Model.ProjectSetting", b =>
                {
                    b.HasOne("BCLabManager.Model.Project", "Project")
                        .WithMany("ProjectSettings")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_project_settings_projects_project_id");
                });

            modelBuilder.Entity("BCLabManager.Model.Protection", b =>
                {
                    b.HasOne("BCLabManager.Model.RecipeTemplate", null)
                        .WithMany("Protections")
                        .HasForeignKey("RecipeTemplateId")
                        .HasConstraintName("fk_protections_recipe_templates_recipe_template_id");

                    b.HasOne("BCLabManager.Model.StepV2", null)
                        .WithMany("Protections")
                        .HasForeignKey("StepV2Id")
                        .HasConstraintName("fk_protections_step_v2_step_v2id");
                });

            modelBuilder.Entity("BCLabManager.Model.Recipe", b =>
                {
                    b.HasOne("BCLabManager.Model.Program", "Program")
                        .WithMany("Recipes")
                        .HasForeignKey("ProgramId")
                        .HasConstraintName("fk_recipes_programs_program_id");

                    b.HasOne("BCLabManager.Model.RecipeTemplate", "RecipeTemplate")
                        .WithMany()
                        .HasForeignKey("RecipeTemplateId")
                        .HasConstraintName("fk_recipes_recipe_templates_recipe_template_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BCLabManager.Model.RecipeTemplate", b =>
                {
                    b.HasOne("BCLabManager.Model.RecipeTemplateGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .HasConstraintName("fk_recipe_templates_recipe_template_groups_group_id");
                });

            modelBuilder.Entity("BCLabManager.Model.ReleasePackage", b =>
                {
                    b.HasOne("BCLabManager.Model.Project", null)
                        .WithMany("ReleasePackages")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_release_packages_projects_project_id");

                    b.HasOne("BCLabManager.Model.LibFG", "lib_fg")
                        .WithMany()
                        .HasForeignKey("lib_fgId")
                        .HasConstraintName("fk_release_packages_lib_fgs_lib_fg_id");

                    b.HasOne("BCLabManager.Model.ProjectSetting", "project_setting")
                        .WithMany()
                        .HasForeignKey("project_settingId")
                        .HasConstraintName("fk_release_packages_project_settings_project_setting_id");
                });

            modelBuilder.Entity("BCLabManager.Model.Step", b =>
                {
                    b.HasOne("BCLabManager.Model.RecipeTemplate", null)
                        .WithMany("Steps")
                        .HasForeignKey("RecipeTemplateId")
                        .HasConstraintName("fk_steps_recipe_templates_recipe_template_id");

                    b.HasOne("BCLabManager.Model.StepTemplate", "StepTemplate")
                        .WithMany()
                        .HasForeignKey("StepTemplateId")
                        .HasConstraintName("fk_steps_step_templates_step_template_id");
                });

            modelBuilder.Entity("BCLabManager.Model.StepRuntime", b =>
                {
                    b.HasOne("BCLabManager.Model.Recipe", null)
                        .WithMany("StepRuntimes")
                        .HasForeignKey("RecipeId")
                        .HasConstraintName("fk_step_runtimes_recipes_recipe_id");

                    b.HasOne("BCLabManager.Model.StepTemplate", "StepTemplate")
                        .WithMany()
                        .HasForeignKey("StepTemplateId")
                        .HasConstraintName("fk_step_runtimes_step_templates_step_template_id");
                });

            modelBuilder.Entity("BCLabManager.Model.StepTemplate", b =>
                {
                    b.HasOne("BCLabManager.Model.Coefficient", "Coefficient")
                        .WithMany()
                        .HasForeignKey("CoefficientId")
                        .HasConstraintName("fk_step_templates_coefficients_coefficient_id");
                });

            modelBuilder.Entity("BCLabManager.Model.StepV2", b =>
                {
                    b.HasOne("BCLabManager.Model.TesterAction", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .HasConstraintName("fk_step_v2_tester_action_action_id");

                    b.HasOne("BCLabManager.Model.RecipeTemplate", null)
                        .WithMany("StepV2s")
                        .HasForeignKey("RecipeTemplateId")
                        .HasConstraintName("fk_step_v2_recipe_templates_recipe_template_id");
                });

            modelBuilder.Entity("BCLabManager.Model.TableMakerProduct", b =>
                {
                    b.HasOne("BCLabManager.Model.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_table_maker_products_projects_project_id");

                    b.HasOne("BCLabManager.Model.TableMakerRecord", "TableMakerRecord")
                        .WithMany("Products")
                        .HasForeignKey("TableMakerRecordId")
                        .HasConstraintName("fk_table_maker_products_table_maker_records_table_maker_record");

                    b.HasOne("BCLabManager.Model.TableMakerProductType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .HasConstraintName("fk_table_maker_products_table_maker_product_types_type_id");
                });

            modelBuilder.Entity("BCLabManager.Model.TableMakerRecord", b =>
                {
                    b.HasOne("BCLabManager.Model.Project", "Project")
                        .WithMany("TableMakerRecords")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_table_maker_records_projects_project_id");
                });

            modelBuilder.Entity("BCLabManager.Model.TestRecord", b =>
                {
                    b.HasOne("BCLabManager.Model.Battery", "AssignedBattery")
                        .WithMany()
                        .HasForeignKey("AssignedBatteryId")
                        .HasConstraintName("fk_test_records_batteries_assigned_battery_id");

                    b.HasOne("BCLabManager.Model.Chamber", "AssignedChamber")
                        .WithMany()
                        .HasForeignKey("AssignedChamberId")
                        .HasConstraintName("fk_test_records_chambers_assigned_chamber_id");

                    b.HasOne("BCLabManager.Model.Channel", "AssignedChannel")
                        .WithMany()
                        .HasForeignKey("AssignedChannelId")
                        .HasConstraintName("fk_test_records_channels_assigned_channel_id");

                    b.HasOne("BCLabManager.Model.Recipe", "Recipe")
                        .WithMany("TestRecords")
                        .HasForeignKey("RecipeId")
                        .HasConstraintName("fk_test_records_recipes_recipe_id");
                });
#pragma warning restore 612, 618
        }
    }
}
